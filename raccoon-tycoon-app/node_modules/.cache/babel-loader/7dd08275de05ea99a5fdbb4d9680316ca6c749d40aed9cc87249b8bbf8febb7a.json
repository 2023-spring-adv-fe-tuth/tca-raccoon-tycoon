{"ast":null,"code":"import _slicedToArray from \"C:/Users/steph/OneDrive/Documents/GitHub/personal/tca-raccoon-tycoon/raccoon-tycoon-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nexport var convertToNative = function convertToNative(data, options) {\n  for (var _i = 0, _Object$entries = Object.entries(data); _i < _Object$entries.length; _i++) {\n    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n      key = _Object$entries$_i[0],\n      value = _Object$entries$_i[1];\n    if (value !== undefined) {\n      switch (key) {\n        case \"NULL\":\n          return null;\n        case \"BOOL\":\n          return Boolean(value);\n        case \"N\":\n          return convertNumber(value, options);\n        case \"B\":\n          return convertBinary(value);\n        case \"S\":\n          return convertString(value);\n        case \"L\":\n          return convertList(value, options);\n        case \"M\":\n          return convertMap(value, options);\n        case \"NS\":\n          return new Set(value.map(function (item) {\n            return convertNumber(item, options);\n          }));\n        case \"BS\":\n          return new Set(value.map(convertBinary));\n        case \"SS\":\n          return new Set(value.map(convertString));\n        default:\n          throw new Error(\"Unsupported type passed: \".concat(key));\n      }\n    }\n  }\n  throw new Error(\"No value defined: \".concat(JSON.stringify(data)));\n};\nvar convertNumber = function convertNumber(numString, options) {\n  if (options !== null && options !== void 0 && options.wrapNumbers) {\n    return {\n      value: numString\n    };\n  }\n  var num = Number(numString);\n  var infinityValues = [Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY];\n  if ((num > Number.MAX_SAFE_INTEGER || num < Number.MIN_SAFE_INTEGER) && !infinityValues.includes(num)) {\n    if (typeof BigInt === \"function\") {\n      try {\n        return BigInt(numString);\n      } catch (error) {\n        throw new Error(\"\".concat(numString, \" can't be converted to BigInt. Set options.wrapNumbers to get string value.\"));\n      }\n    } else {\n      throw new Error(\"\".concat(numString, \" is outside SAFE_INTEGER bounds. Set options.wrapNumbers to get string value.\"));\n    }\n  }\n  return num;\n};\nvar convertString = function convertString(stringValue) {\n  return stringValue;\n};\nvar convertBinary = function convertBinary(binaryValue) {\n  return binaryValue;\n};\nvar convertList = function convertList(list, options) {\n  return list.map(function (item) {\n    return convertToNative(item, options);\n  });\n};\nvar convertMap = function convertMap(map, options) {\n  return Object.entries(map).reduce(function (acc, _ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n      key = _ref2[0],\n      value = _ref2[1];\n    return acc[key] = convertToNative(value, options), acc;\n  }, {});\n};","map":{"version":3,"names":["convertToNative","data","options","_i","_Object$entries","Object","entries","length","_Object$entries$_i","_slicedToArray","key","value","undefined","Boolean","convertNumber","convertBinary","convertString","convertList","convertMap","Set","map","item","Error","concat","JSON","stringify","numString","wrapNumbers","num","Number","infinityValues","POSITIVE_INFINITY","NEGATIVE_INFINITY","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","includes","BigInt","error","stringValue","binaryValue","list","reduce","acc","_ref","_ref2"],"sources":["C:/Users/steph/OneDrive/Documents/GitHub/personal/tca-raccoon-tycoon/raccoon-tycoon-app/node_modules/@aws-sdk/util-dynamodb/dist-es/convertToNative.js"],"sourcesContent":["export const convertToNative = (data, options) => {\n    for (const [key, value] of Object.entries(data)) {\n        if (value !== undefined) {\n            switch (key) {\n                case \"NULL\":\n                    return null;\n                case \"BOOL\":\n                    return Boolean(value);\n                case \"N\":\n                    return convertNumber(value, options);\n                case \"B\":\n                    return convertBinary(value);\n                case \"S\":\n                    return convertString(value);\n                case \"L\":\n                    return convertList(value, options);\n                case \"M\":\n                    return convertMap(value, options);\n                case \"NS\":\n                    return new Set(value.map((item) => convertNumber(item, options)));\n                case \"BS\":\n                    return new Set(value.map(convertBinary));\n                case \"SS\":\n                    return new Set(value.map(convertString));\n                default:\n                    throw new Error(`Unsupported type passed: ${key}`);\n            }\n        }\n    }\n    throw new Error(`No value defined: ${JSON.stringify(data)}`);\n};\nconst convertNumber = (numString, options) => {\n    if (options?.wrapNumbers) {\n        return { value: numString };\n    }\n    const num = Number(numString);\n    const infinityValues = [Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY];\n    if ((num > Number.MAX_SAFE_INTEGER || num < Number.MIN_SAFE_INTEGER) && !infinityValues.includes(num)) {\n        if (typeof BigInt === \"function\") {\n            try {\n                return BigInt(numString);\n            }\n            catch (error) {\n                throw new Error(`${numString} can't be converted to BigInt. Set options.wrapNumbers to get string value.`);\n            }\n        }\n        else {\n            throw new Error(`${numString} is outside SAFE_INTEGER bounds. Set options.wrapNumbers to get string value.`);\n        }\n    }\n    return num;\n};\nconst convertString = (stringValue) => stringValue;\nconst convertBinary = (binaryValue) => binaryValue;\nconst convertList = (list, options) => list.map((item) => convertToNative(item, options));\nconst convertMap = (map, options) => Object.entries(map).reduce((acc, [key, value]) => ((acc[key] = convertToNative(value, options)), acc), {});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}