{"ast":null,"code":"import _slicedToArray from \"C:/Users/steph/OneDrive/Documents/GitHub/personal/tca-raccoon-tycoon/raccoon-tycoon-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"C:/Users/steph/OneDrive/Documents/GitHub/personal/tca-raccoon-tycoon/raccoon-tycoon-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"C:/Users/steph/OneDrive/Documents/GitHub/personal/tca-raccoon-tycoon/raccoon-tycoon-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nexport var convertToAttr = function convertToAttr(data, options) {\n  var _data$constructor, _data$constructor2, _data$constructor3, _data$constructor4, _data$constructor5, _data$constructor6;\n  if (data === undefined) {\n    throw new Error(\"Pass options.removeUndefinedValues=true to remove undefined values from map/array/set.\");\n  } else if (data === null && typeof data === \"object\") {\n    return convertToNullAttr();\n  } else if (Array.isArray(data)) {\n    return convertToListAttr(data, options);\n  } else if ((data === null || data === void 0 ? void 0 : (_data$constructor = data.constructor) === null || _data$constructor === void 0 ? void 0 : _data$constructor.name) === \"Set\") {\n    return convertToSetAttr(data, options);\n  } else if ((data === null || data === void 0 ? void 0 : (_data$constructor2 = data.constructor) === null || _data$constructor2 === void 0 ? void 0 : _data$constructor2.name) === \"Map\") {\n    return convertToMapAttrFromIterable(data, options);\n  } else if ((data === null || data === void 0 ? void 0 : (_data$constructor3 = data.constructor) === null || _data$constructor3 === void 0 ? void 0 : _data$constructor3.name) === \"Object\" || !data.constructor && typeof data === \"object\") {\n    return convertToMapAttrFromEnumerableProps(data, options);\n  } else if (isBinary(data)) {\n    if (data.length === 0 && options !== null && options !== void 0 && options.convertEmptyValues) {\n      return convertToNullAttr();\n    }\n    return convertToBinaryAttr(data);\n  } else if (typeof data === \"boolean\" || (data === null || data === void 0 ? void 0 : (_data$constructor4 = data.constructor) === null || _data$constructor4 === void 0 ? void 0 : _data$constructor4.name) === \"Boolean\") {\n    return {\n      BOOL: data.valueOf()\n    };\n  } else if (typeof data === \"number\" || (data === null || data === void 0 ? void 0 : (_data$constructor5 = data.constructor) === null || _data$constructor5 === void 0 ? void 0 : _data$constructor5.name) === \"Number\") {\n    return convertToNumberAttr(data);\n  } else if (typeof data === \"bigint\") {\n    return convertToBigIntAttr(data);\n  } else if (typeof data === \"string\" || (data === null || data === void 0 ? void 0 : (_data$constructor6 = data.constructor) === null || _data$constructor6 === void 0 ? void 0 : _data$constructor6.name) === \"String\") {\n    if (data.length === 0 && options !== null && options !== void 0 && options.convertEmptyValues) {\n      return convertToNullAttr();\n    }\n    return convertToStringAttr(data);\n  } else if (options !== null && options !== void 0 && options.convertClassInstanceToMap && typeof data === \"object\") {\n    return convertToMapAttrFromEnumerableProps(data, options);\n  }\n  throw new Error(\"Unsupported type passed: \".concat(data, \". Pass options.convertClassInstanceToMap=true to marshall typeof object as map attribute.\"));\n};\nvar convertToListAttr = function convertToListAttr(data, options) {\n  return {\n    L: data.filter(function (item) {\n      return !(options !== null && options !== void 0 && options.removeUndefinedValues) || (options === null || options === void 0 ? void 0 : options.removeUndefinedValues) && item !== undefined;\n    }).map(function (item) {\n      return convertToAttr(item, options);\n    })\n  };\n};\nvar convertToSetAttr = function convertToSetAttr(set, options) {\n  var setToOperate = options !== null && options !== void 0 && options.removeUndefinedValues ? new Set(_toConsumableArray(set).filter(function (value) {\n    return value !== undefined;\n  })) : set;\n  if (!(options !== null && options !== void 0 && options.removeUndefinedValues) && setToOperate.has(undefined)) {\n    throw new Error(\"Pass options.removeUndefinedValues=true to remove undefined values from map/array/set.\");\n  }\n  if (setToOperate.size === 0) {\n    if (options !== null && options !== void 0 && options.convertEmptyValues) {\n      return convertToNullAttr();\n    }\n    throw new Error(\"Pass a non-empty set, or options.convertEmptyValues=true.\");\n  }\n  var item = setToOperate.values().next().value;\n  if (typeof item === \"number\") {\n    return {\n      NS: Array.from(setToOperate).map(convertToNumberAttr).map(function (item) {\n        return item.N;\n      })\n    };\n  } else if (typeof item === \"bigint\") {\n    return {\n      NS: Array.from(setToOperate).map(convertToBigIntAttr).map(function (item) {\n        return item.N;\n      })\n    };\n  } else if (typeof item === \"string\") {\n    return {\n      SS: Array.from(setToOperate).map(convertToStringAttr).map(function (item) {\n        return item.S;\n      })\n    };\n  } else if (isBinary(item)) {\n    return {\n      BS: Array.from(setToOperate).map(convertToBinaryAttr).map(function (item) {\n        return item.B;\n      })\n    };\n  } else {\n    throw new Error(\"Only Number Set (NS), Binary Set (BS) or String Set (SS) are allowed.\");\n  }\n};\nvar convertToMapAttrFromIterable = function convertToMapAttrFromIterable(data, options) {\n  return {\n    M: function (data) {\n      var map = {};\n      var _iterator = _createForOfIteratorHelper(data),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n            key = _step$value[0],\n            value = _step$value[1];\n          if (typeof value !== \"function\" && (value !== undefined || !(options !== null && options !== void 0 && options.removeUndefinedValues))) {\n            map[key] = convertToAttr(value, options);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return map;\n    }(data)\n  };\n};\nvar convertToMapAttrFromEnumerableProps = function convertToMapAttrFromEnumerableProps(data, options) {\n  return {\n    M: function (data) {\n      var map = {};\n      for (var key in data) {\n        var value = data[key];\n        if (typeof value !== \"function\" && (value !== undefined || !(options !== null && options !== void 0 && options.removeUndefinedValues))) {\n          map[key] = convertToAttr(value, options);\n        }\n      }\n      return map;\n    }(data)\n  };\n};\nvar convertToNullAttr = function convertToNullAttr() {\n  return {\n    NULL: true\n  };\n};\nvar convertToBinaryAttr = function convertToBinaryAttr(data) {\n  return {\n    B: data\n  };\n};\nvar convertToStringAttr = function convertToStringAttr(data) {\n  return {\n    S: data.toString()\n  };\n};\nvar convertToBigIntAttr = function convertToBigIntAttr(data) {\n  return {\n    N: data.toString()\n  };\n};\nvar validateBigIntAndThrow = function validateBigIntAndThrow(errorPrefix) {\n  throw new Error(\"\".concat(errorPrefix, \" \").concat(typeof BigInt === \"function\" ? \"Use BigInt.\" : \"Pass string value instead.\", \" \"));\n};\nvar convertToNumberAttr = function convertToNumberAttr(num) {\n  if ([Number.NaN, Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY].map(function (val) {\n    return val.toString();\n  }).includes(num.toString())) {\n    throw new Error(\"Special numeric value \".concat(num.toString(), \" is not allowed\"));\n  } else if (num > Number.MAX_SAFE_INTEGER) {\n    validateBigIntAndThrow(\"Number \".concat(num.toString(), \" is greater than Number.MAX_SAFE_INTEGER.\"));\n  } else if (num < Number.MIN_SAFE_INTEGER) {\n    validateBigIntAndThrow(\"Number \".concat(num.toString(), \" is lesser than Number.MIN_SAFE_INTEGER.\"));\n  }\n  return {\n    N: num.toString()\n  };\n};\nvar isBinary = function isBinary(data) {\n  var binaryTypes = [\"ArrayBuffer\", \"Blob\", \"Buffer\", \"DataView\", \"File\", \"Int8Array\", \"Uint8Array\", \"Uint8ClampedArray\", \"Int16Array\", \"Uint16Array\", \"Int32Array\", \"Uint32Array\", \"Float32Array\", \"Float64Array\", \"BigInt64Array\", \"BigUint64Array\"];\n  if (data !== null && data !== void 0 && data.constructor) {\n    return binaryTypes.includes(data.constructor.name);\n  }\n  return false;\n};","map":{"version":3,"names":["convertToAttr","data","options","_data$constructor","_data$constructor2","_data$constructor3","_data$constructor4","_data$constructor5","_data$constructor6","undefined","Error","convertToNullAttr","Array","isArray","convertToListAttr","constructor","name","convertToSetAttr","convertToMapAttrFromIterable","convertToMapAttrFromEnumerableProps","isBinary","length","convertEmptyValues","convertToBinaryAttr","BOOL","valueOf","convertToNumberAttr","convertToBigIntAttr","convertToStringAttr","convertClassInstanceToMap","concat","L","filter","item","removeUndefinedValues","map","set","setToOperate","Set","_toConsumableArray","value","has","size","values","next","NS","from","N","SS","S","BS","B","M","_iterator","_createForOfIteratorHelper","_step","s","n","done","_step$value","_slicedToArray","key","err","e","f","NULL","toString","validateBigIntAndThrow","errorPrefix","BigInt","num","Number","NaN","POSITIVE_INFINITY","NEGATIVE_INFINITY","val","includes","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","binaryTypes"],"sources":["C:/Users/steph/OneDrive/Documents/GitHub/personal/tca-raccoon-tycoon/raccoon-tycoon-app/node_modules/@aws-sdk/util-dynamodb/dist-es/convertToAttr.js"],"sourcesContent":["export const convertToAttr = (data, options) => {\n    if (data === undefined) {\n        throw new Error(`Pass options.removeUndefinedValues=true to remove undefined values from map/array/set.`);\n    }\n    else if (data === null && typeof data === \"object\") {\n        return convertToNullAttr();\n    }\n    else if (Array.isArray(data)) {\n        return convertToListAttr(data, options);\n    }\n    else if (data?.constructor?.name === \"Set\") {\n        return convertToSetAttr(data, options);\n    }\n    else if (data?.constructor?.name === \"Map\") {\n        return convertToMapAttrFromIterable(data, options);\n    }\n    else if (data?.constructor?.name === \"Object\" ||\n        (!data.constructor && typeof data === \"object\")) {\n        return convertToMapAttrFromEnumerableProps(data, options);\n    }\n    else if (isBinary(data)) {\n        if (data.length === 0 && options?.convertEmptyValues) {\n            return convertToNullAttr();\n        }\n        return convertToBinaryAttr(data);\n    }\n    else if (typeof data === \"boolean\" || data?.constructor?.name === \"Boolean\") {\n        return { BOOL: data.valueOf() };\n    }\n    else if (typeof data === \"number\" || data?.constructor?.name === \"Number\") {\n        return convertToNumberAttr(data);\n    }\n    else if (typeof data === \"bigint\") {\n        return convertToBigIntAttr(data);\n    }\n    else if (typeof data === \"string\" || data?.constructor?.name === \"String\") {\n        if (data.length === 0 && options?.convertEmptyValues) {\n            return convertToNullAttr();\n        }\n        return convertToStringAttr(data);\n    }\n    else if (options?.convertClassInstanceToMap && typeof data === \"object\") {\n        return convertToMapAttrFromEnumerableProps(data, options);\n    }\n    throw new Error(`Unsupported type passed: ${data}. Pass options.convertClassInstanceToMap=true to marshall typeof object as map attribute.`);\n};\nconst convertToListAttr = (data, options) => ({\n    L: data\n        .filter((item) => !options?.removeUndefinedValues || (options?.removeUndefinedValues && item !== undefined))\n        .map((item) => convertToAttr(item, options)),\n});\nconst convertToSetAttr = (set, options) => {\n    const setToOperate = options?.removeUndefinedValues ? new Set([...set].filter((value) => value !== undefined)) : set;\n    if (!options?.removeUndefinedValues && setToOperate.has(undefined)) {\n        throw new Error(`Pass options.removeUndefinedValues=true to remove undefined values from map/array/set.`);\n    }\n    if (setToOperate.size === 0) {\n        if (options?.convertEmptyValues) {\n            return convertToNullAttr();\n        }\n        throw new Error(`Pass a non-empty set, or options.convertEmptyValues=true.`);\n    }\n    const item = setToOperate.values().next().value;\n    if (typeof item === \"number\") {\n        return {\n            NS: Array.from(setToOperate)\n                .map(convertToNumberAttr)\n                .map((item) => item.N),\n        };\n    }\n    else if (typeof item === \"bigint\") {\n        return {\n            NS: Array.from(setToOperate)\n                .map(convertToBigIntAttr)\n                .map((item) => item.N),\n        };\n    }\n    else if (typeof item === \"string\") {\n        return {\n            SS: Array.from(setToOperate)\n                .map(convertToStringAttr)\n                .map((item) => item.S),\n        };\n    }\n    else if (isBinary(item)) {\n        return {\n            BS: Array.from(setToOperate)\n                .map(convertToBinaryAttr)\n                .map((item) => item.B),\n        };\n    }\n    else {\n        throw new Error(`Only Number Set (NS), Binary Set (BS) or String Set (SS) are allowed.`);\n    }\n};\nconst convertToMapAttrFromIterable = (data, options) => ({\n    M: ((data) => {\n        const map = {};\n        for (const [key, value] of data) {\n            if (typeof value !== \"function\" && (value !== undefined || !options?.removeUndefinedValues)) {\n                map[key] = convertToAttr(value, options);\n            }\n        }\n        return map;\n    })(data),\n});\nconst convertToMapAttrFromEnumerableProps = (data, options) => ({\n    M: ((data) => {\n        const map = {};\n        for (const key in data) {\n            const value = data[key];\n            if (typeof value !== \"function\" && (value !== undefined || !options?.removeUndefinedValues)) {\n                map[key] = convertToAttr(value, options);\n            }\n        }\n        return map;\n    })(data),\n});\nconst convertToNullAttr = () => ({ NULL: true });\nconst convertToBinaryAttr = (data) => ({ B: data });\nconst convertToStringAttr = (data) => ({ S: data.toString() });\nconst convertToBigIntAttr = (data) => ({ N: data.toString() });\nconst validateBigIntAndThrow = (errorPrefix) => {\n    throw new Error(`${errorPrefix} ${typeof BigInt === \"function\" ? \"Use BigInt.\" : \"Pass string value instead.\"} `);\n};\nconst convertToNumberAttr = (num) => {\n    if ([Number.NaN, Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY]\n        .map((val) => val.toString())\n        .includes(num.toString())) {\n        throw new Error(`Special numeric value ${num.toString()} is not allowed`);\n    }\n    else if (num > Number.MAX_SAFE_INTEGER) {\n        validateBigIntAndThrow(`Number ${num.toString()} is greater than Number.MAX_SAFE_INTEGER.`);\n    }\n    else if (num < Number.MIN_SAFE_INTEGER) {\n        validateBigIntAndThrow(`Number ${num.toString()} is lesser than Number.MIN_SAFE_INTEGER.`);\n    }\n    return { N: num.toString() };\n};\nconst isBinary = (data) => {\n    const binaryTypes = [\n        \"ArrayBuffer\",\n        \"Blob\",\n        \"Buffer\",\n        \"DataView\",\n        \"File\",\n        \"Int8Array\",\n        \"Uint8Array\",\n        \"Uint8ClampedArray\",\n        \"Int16Array\",\n        \"Uint16Array\",\n        \"Int32Array\",\n        \"Uint32Array\",\n        \"Float32Array\",\n        \"Float64Array\",\n        \"BigInt64Array\",\n        \"BigUint64Array\",\n    ];\n    if (data?.constructor) {\n        return binaryTypes.includes(data.constructor.name);\n    }\n    return false;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}