{"ast":null,"code":"import _objectSpread from\"C:/Users/steph/OneDrive/Documents/GitHub/personal/tca-raccoon-tycoon/raccoon-tycoon-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _toConsumableArray from\"C:/Users/steph/OneDrive/Documents/GitHub/personal/tca-raccoon-tycoon/raccoon-tycoon-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";//\n// Interfaces and function types...\n//\n;;//\n// Default function implementations...\n//\nexport var getPreviousPlayers=function getPreviousPlayers(grs){// const allPreviousPlayers = grs.map(x => x.players);\nvar allPreviousPlayers=grs.flatMap(function(x){return x.players;});return _toConsumableArray(new Set(allPreviousPlayers)).sort();};export var calculateLeaderboard=function calculateLeaderboard(results){var gameResultsGroupedByPlayer=getPreviousPlayers(results).reduce(function(acc,x){return acc.set(x,results.filter(function(y){return y.players.includes(x);}));},new Map());return _toConsumableArray(gameResultsGroupedByPlayer)// First object with names game counts and wins...\n.map(function(x){return{name:x[0],totalGames:x[1].length,wins:x[1].filter(function(y){return y.winner===x[0];}).length};})/// Now use wins and total games to get avg and losses\n.map(function(x){return{name:x.name,wins:x.wins,losses:x.totalGames-x.wins,avg:x.wins/x.totalGames};})// Sort order, with tie breaks that include number of games played\n.sort(function(a,b){return a.avg*1000+a.wins+a.losses>b.avg*1000+b.wins+b.losses?-1:1;})// Turn the avg into a 3 digit string.\n.map(function(x){return _objectSpread(_objectSpread({},x),{},{avg:x.avg.toFixed(3)});});};export var getGameDuration=function getGameDuration(result){return new Date(result.end).getTime()-new Date(result.start).getTime();};export var getShortestGameDuration=function getShortestGameDuration(results){return Math.min.apply(Math,_toConsumableArray(results.map(function(x){return getGameDuration(x);})));};export var getLongestGameDuration=function getLongestGameDuration(results){return Math.max.apply(Math,_toConsumableArray(results.map(function(x){return getGameDuration(x);})));};export var getAverageGameDuration=function getAverageGameDuration(results){var sum=results.reduce(function(acc,x){return acc+getGameDuration(x);},0);return results.length>0?sum/results.length:0;//2\n};export var getAverageGameDurationByPlayerCount=function getAverageGameDurationByPlayerCount(results){var grouped=results.reduce(function(acc,x){var _acc$get;return acc.set(x.players.length,[].concat(_toConsumableArray((_acc$get=acc.get(x.players.length))!==null&&_acc$get!==void 0?_acc$get:[]),[x]));},new Map());return _toConsumableArray(grouped).map(function(x){return{playerCount:x[0],avgGameDuration:getAverageGameDuration(x[1])};}).sort(function(a,b){return a.playerCount<b.playerCount?-1:1;});};","map":{"version":3,"names":["getPreviousPlayers","grs","allPreviousPlayers","flatMap","x","players","_toConsumableArray","Set","sort","calculateLeaderboard","results","gameResultsGroupedByPlayer","reduce","acc","set","filter","y","includes","Map","map","name","totalGames","length","wins","winner","losses","avg","a","b","_objectSpread","toFixed","getGameDuration","result","Date","end","getTime","start","getShortestGameDuration","Math","min","apply","getLongestGameDuration","max","getAverageGameDuration","sum","getAverageGameDurationByPlayerCount","grouped","_acc$get","concat","get","playerCount","avgGameDuration"],"sources":["C:/Users/steph/OneDrive/Documents/GitHub/personal/tca-raccoon-tycoon/raccoon-tycoon-app/src/front-end-model.ts"],"sourcesContent":["//\r\n// Interfaces and function types...\r\n//\r\nexport interface GameResult {\r\n    winner: string;\r\n    players: string[];\r\n\r\n    start: string;\r\n    end: string;\r\n};\r\n\r\nexport interface LeaderboardPlayer {\r\n    name: string;\r\n    wins: number;\r\n    losses: number;\r\n    avg: string;\r\n};\r\n\r\nexport interface SetupInfo {\r\n    start: string;\r\n    chosenPlayers: string[];\r\n}\r\n\r\nexport type GetPreviousPlayersFunc = (results: GameResult[]) => string[];\r\nexport type CalculateLeaderboardFunc = (results: GameResult[]) => LeaderboardPlayer[];\r\n\r\n\r\n//\r\n// Default function implementations...\r\n//\r\nexport const getPreviousPlayers: GetPreviousPlayersFunc = (grs) => {\r\n    \r\n    // const allPreviousPlayers = grs.map(x => x.players);\r\n    const allPreviousPlayers = grs.flatMap(x => x.players);\r\n    \r\n    return [\r\n        ...new Set(allPreviousPlayers)\r\n    ].sort();\r\n};\r\n\r\nexport const calculateLeaderboard: CalculateLeaderboardFunc = (results) => {\r\n\r\n    const gameResultsGroupedByPlayer = getPreviousPlayers(results).reduce(\r\n        (acc, x) => acc.set(\r\n            x\r\n            , results.filter(y => y.players.includes(x))\r\n        )\r\n        , new Map<string, GameResult[]>() \r\n    );\r\n\r\n    return [...gameResultsGroupedByPlayer]\r\n\r\n        // First object with names game counts and wins...\r\n        .map(x => ({\r\n            name: x[0]\r\n            , totalGames: x[1].length\r\n            , wins: x[1].filter(y => y.winner === x[0]).length\r\n        }))\r\n\r\n        /// Now use wins and total games to get avg and losses\r\n        .map(x => ({\r\n            name: x.name\r\n            , wins: x.wins \r\n            , losses: x.totalGames - x.wins\r\n            , avg: x.wins / x.totalGames\r\n        }))\r\n\r\n        // Sort order, with tie breaks that include number of games played\r\n        .sort(\r\n            (a, b) => (a.avg * 1000 + a.wins + a.losses) > (b.avg * 1000 + b.wins + b.losses) ? -1 : 1\r\n        )\r\n\r\n        // Turn the avg into a 3 digit string.\r\n        .map(x => ({\r\n            ...x\r\n            , avg: x.avg.toFixed(3)\r\n        }))\r\n    ;\r\n};\r\n\r\nexport const getGameDuration = \r\n    (result: GameResult) => \r\n        new Date(result.end).getTime() - new Date(result.start).getTime()\r\n;\r\n\r\nexport const getShortestGameDuration = (results: GameResult[]) => Math.min(\r\n    ...results.map(x => getGameDuration(x))\r\n);\r\n\r\nexport const getLongestGameDuration = (results: GameResult[]) => Math.max(\r\n    ...results.map(x => getGameDuration(x))\r\n);\r\n\r\nexport const getAverageGameDuration = (results: GameResult[]) => {\r\n    const sum = results.reduce(\r\n        (acc, x) => acc + getGameDuration(x)\r\n        , 0\r\n    );\r\n\r\n    return results.length > 0\r\n        ? sum / results.length\r\n        : 0\r\n    ;//2\r\n};\r\n\r\nexport const getAverageGameDurationByPlayerCount = (results: GameResult[]) => {\r\n\r\n    const grouped = results.reduce(\r\n        (acc, x) => acc.set(\r\n            x.players.length\r\n            , [\r\n                ...(acc.get(x.players.length) ?? [])\r\n                , x\r\n            ]\r\n        )\r\n        , new Map<number, GameResult[]>()\r\n    );\r\n\r\n    return [...grouped]\r\n        .map(x => ({\r\n            playerCount: x[0]\r\n            , avgGameDuration: getAverageGameDuration(x[1])\r\n        }))\r\n        .sort(\r\n            (a, b) => a.playerCount < b.playerCount ? -1 : 1\r\n        )\r\n    ;\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}